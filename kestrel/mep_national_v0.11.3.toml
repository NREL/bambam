parallelism = 100
response_persistence_policy = "discard_response_from_memory"

[graph]
edge_list_input_file = "/projects/mepcore/lib/routee-compass-tomtom/data/tomtom_national/edges-compass.csv.gz"
vertex_list_input_file = "/projects/mepcore/lib/routee-compass-tomtom/data/tomtom_national/vertices-compass.csv.gz"
verbose = true

[mapping]
type = "edge"
geometry_input_file = "/projects/mepcore/lib/routee-compass-tomtom/data/tomtom_national/edges-geometries-enumerated.txt.gz"
tolerance.distance = 15.0
tolerance.unit = "meters"
queries_without_destinations = false
matching_type = ["point", "vertex_id", "edge_id"]

[algorithm]
type = "a*"

# cut off searches that exceed these termination policies. 
[termination]
type = "combined"
[[termination.models]]
type = "query_runtime"
limit = "00:01:00"
frequency = 100_000
[[termination.models]]
type = "solution_size"
limit = 2_000_000

[traversal]
type = "combined"

[[traversal.models]]
type = "distance"
distance_unit = "miles"

[[traversal.models]]
type = "fixed_speed"
name = "walk"
speed = 5.0
speed_unit = "kph"

[[traversal.models]]
type = "fixed_speed"
name = "bike"
speed = 16.0
speed_unit = "kph"

[[traversal.models]]
type = "speed_profile"
edge_to_speed_profile_input_file = "/projects/mepcore/lib/routee-compass-tomtom/data/tomtom_national/edges-speed-profile-id-mapping-enumerated.txt.gz"
speed_profile_input_file = "/projects/mepcore/lib/routee-compass-tomtom/data/tomtom_national/speed-profile.csv.gz"
# 35.704525623444134 is the average of all weekday_speed and weekend_speed entries
fallback = { type = "global", fill_value = 35.704, speed_unit = "kph" }
max_speed = 128
distance_unit = "kilometers"
time_unit = "minutes"
speed_unit = "kph"
[traversal.models.speed_trace]
type = "dense"
speed_trace_input_file = "/projects/mepcore/lib/routee-compass-tomtom/data/tomtom_national/speed-trace.csv.gz"
stride = 300

[[traversal.models]]
type = "multimodal"
[traversal.models.output_features]
trip_time = { time_unit = "minutes", initial = 0.0, accumulator = true }
edge_time = { time_unit = "minutes", initial = 0.0, accumulator = false }
# penalty_factor = { name = "factor", unit = "none", accumulator = false, format = { FloatingPoint = { initial = 1.0 } } }

[traversal.models.modes]
walk = [{ speed_feature = "walk_speed", destinations = ["edge_time", "trip_time"] }]
bike = [{ speed_feature = "bike_speed", destinations = ["edge_time", "trip_time"] }]
drive = [
    { speed_feature = "edge_speed", destinations = ["edge_time", "trip_time"] },
    # { time_feature = "trip_enroute_delay", destinations = [
    #     "edge_time",
    #     "trip_time",
    # ] },
]

# use a time-optimal routing strategy
[cost]
weights = { trip_time = 1.0 }
vehicle_rates = { trip_time = { type = "raw" } }
# weights = { trip_time = 1.0, penalty_factor = 1.0 }
# vehicle_rates = { trip_time = { type = "raw" }, penalty_factor = { type = "raw" } }
cost_aggregation = "mul"

[access]
type = "turn_delay"
edge_heading_input_file = "/projects/mepcore/lib/routee-compass-tomtom/data/tomtom_national/edges-headings-enumerated.csv.gz"
[access.turn_delay_model]
type = "tabular_discrete"
time_unit = "seconds"
[access.turn_delay_model.table]
no_turn = 0.0
slight_right = 0.5
right = 1.0
sharp_right = 1.5
slight_left = 1.0
left = 2.5
sharp_left = 3.5
u_turn = 9.5

[frontier]
type = "combined"

[[frontier.models]]
type = "road_class"
road_class_input_file = "/projects/mepcore/lib/routee-compass-tomtom/data/tomtom_national/edges-routing-class-enumerated.txt.gz"

[[frontier.models]]
type = "turn_restriction"
turn_restriction_input_file = "/projects/mepcore/lib/routee-compass-tomtom/data/tomtom_national/edges-turn-restrictions.csv.gz"

[[frontier.models]]
type = "isochrone"
time_limit = 40.0
time_unit = "minutes"

[[plugin.input_plugins]]
type = "inject"
format = "key_value"
write_mode = "overwrite"
key = "grid_search"
[plugin.input_plugins.value]
modes = [{ mode = "walk", road_classes = [4, 5, 6, 7] }, { mode = "bike", road_classes = [4, 5, 6, 7] }, { mode = "drive", road_classes = [1, 2, 3, 4, 5, 6] }]

[[plugin.input_plugins]]
type = "inject"
key = "start_time"
value = "08:00:00"
format = "key_value"
write_mode = "overwrite"

[[plugin.input_plugins]]
type = "inject"
key = "start_weekday"
value = "monday"
format = "key_value"
write_mode = "overwrite"

[[plugin.input_plugins]]
type = "inject"
key = "time_limit"
value = 40.0
format = "key_value"
write_mode = "overwrite"

[[plugin.input_plugins]]
type = "grid_search"

[[plugin.input_plugins]]
type = "load_balancer"
[plugin.input_plugins.weight_heuristic]
type = "custom"
[plugin.input_plugins.weight_heuristic.custom_weight_type]
type = "categorical"
column_name = "mode"
default = 1
mapping = { "walk" = 1, "bike" = 10, "drive" = 100 }

[[plugin.output_plugins]]
type = "summary"

[[plugin.output_plugins]]
type = "isochrone"
time_bin = { type = "list", times = [10, 20, 30, 40] }
isochrone_algorithm = { type = "k_nearest_concave_hull", k = 3 }
destination_point_generator = { type = "destination_point" }
isochrone_output_format = "wkb"

# ### MEP OPPORTUNITY DATA CONFIGURATION #################################
# # assigns opportunities to search results based on a file or api data source
# # and a taxonomy for MEP activity types.
# # this example shows data loaded from the census LODES online file repository
# # assigning activity types by NAICS sector id. 
# [[plugin.output_plugins]]
# type = "opportunity"
# collect_format = "aggregate"

# [plugin.output_plugins.model]
# type = "api"
# vertex_input_file = "/projects/mepcore/lib/routee-compass-tomtom/data/tomtom_national/vertices-compass.csv.gz"
# activity_column_names = [
#     "retail",
#     "entertainment",
#     "services",
#     "healthcare",
#     "food",
#     "jobs",
# ]
# table_orientation = "destination_vertex_oriented"

# [plugin.output_plugins.model.opportunity_source]
# type = "lodes"
# # # load the entire USA from LODES + Tiger/Lines
# study_region.type = "denver"

# # # here we are just looking for opportunities in denver.
# # # `geoids` is a vector of FIPS identifiers. these will be converted to their
# # # FIPS state code and used to download LODES dataset files which are organized by state.
# # # one thing we can do here is just load all of the state of Colorado (FIPS 08):
# # study_region = { type = "census", geoids = ["08"] }

# # # this is more targeted, it includes just the few counties of geoids i think are relevant,
# # # which are Adams, Arapahoe, and Denver Counties.
# # study_region = { type = "census", geoids = ["08001", "08005", "08031"] }

# # collect LODES data at the tract level. while it is available at the block,
# # the download + processing time is 10x that of census tracts. other possible values
# # are `block`, `county` or `state`.
# data_granularity = "census_tract"
# # different editions of the dataset, we are choosing LODES v 8.0.
# edition = "LODES8"
# # Job Type, can have a value of “JT00” for All Jobs, “JT01” for Primary Jobs, “JT02” for All
# # Private Jobs, “JT03” for Private Primary Jobs, “JT04” for All Federal Jobs, or “JT05” for
# # Federal Primary Jobs
# job_type = "JT00"
# # Segment of the workforce, can have the values of:
# # - S000: Total number of jobs (default)
# # - SA01: Number of jobs of workers age 29 or younger
# # - SA02: Number of jobs for workers age 30 to 54
# # - SA03: Number of jobs for workers age 55 or older 
# # - SE01: Number of jobs with earnings $1250/month or less
# # - SE02: Number of jobs with earnings $1251/month to $3333/month
# # - SE03: Number of jobs with earnings greater than $3333/month
# # - SI01: Number of jobs in Goods Producing industry sectors
# # - SI02: Number of jobs in Trade, Transportation, and Utilities industry sectors
# # - SI03: Number of jobs in All Other Services industry sectors
# segment = "S000"

# # most recent year with all states. Alaska has no coverage from 2017-2022. we may
# # want a "continental" variant which could support 2022.
# year = 2016

# [plugin.output_plugins.model.opportunity_source.activity_mapping]
# # see https://lehd.ces.census.gov/data/lodes/LODES8/LODESTechDoc8.0.pdf
# CNS01 = ["jobs"]                  # 11 (Agriculture, Forestry, Fishing and Hunting)
# CNS02 = ["jobs"]                  # 21 (Mining, Quarrying, and Oil and Gas Extraction)
# CNS03 = ["jobs"]                  # 22 (Utilities)
# CNS04 = ["jobs"]                  # 23 (Construction)
# CNS05 = ["jobs"]                  # 31-33 (Manufacturing)
# CNS06 = ["jobs", "retail"]        # 42 (Wholesale Trade)
# CNS07 = ["jobs", "retail"]        # 44-45 (Retail Trade)
# CNS08 = ["jobs"]                  # 48-49 (Transportation and Warehousing)
# CNS09 = ["jobs"]                  # 51 (Information)
# CNS10 = ["jobs"]                  # 52 (Finance and Insurance)
# CNS11 = ["jobs"]                  # 53 (Real Estate and Rental and Leasing)
# CNS12 = ["jobs"]                  # 54 (Professional, Scientific, and Technical Services)
# CNS13 = ["jobs"]                  # 55 (Management of Companies and Enterprises)
# CNS14 = ["jobs"]                  # 56 (Admin/Support/Waste Mgmt/Remediation Services)
# CNS15 = ["jobs", "services"]      # 61 (Educational Services)
# CNS16 = ["jobs", "healthcare"]    # 62 (Health Care and Social Assistance)
# CNS17 = ["jobs", "entertainment"] # 71 (Arts, Entertainment, and Recreation)
# CNS18 = ["jobs", "food"]          # 72 (Accommodation and Food Services)
# CNS19 = ["jobs"]                  # 81 (Other Services [except Public Administration])
# CNS20 = ["jobs"]                  # 92 (Public Administration)

### MEP OPPORTUNITY DATA CONFIGURATION #################################
# assigns opportunities to search results based on a file or api data source
# and a taxonomy for MEP activity types.
# this example shows data loaded from the census LODES online file repository
# assigning activity types by NAICS sector id. 
[[plugin.output_plugins]]
type = "opportunity"
collect_format = "aggregate"

[plugin.output_plugins.model]
type = "combined"

[[plugin.output_plugins.model.models]]
type = "file"
opportunity_input_file = "/projects/mepcore/data/in/shared/costar/2018-04-costar-vectorized.csv.gz"
activity_column_names = ["retail", "entertainment", "services", "healthcare", "food"]
table_orientation = "destination_vertex_oriented"

[[plugin.output_plugins.model.models]]
type = "api"
vertex_input_file = "/projects/mepcore/lib/routee-compass-tomtom/data/tomtom_national/vertices-compass.csv.gz"
activity_column_names = ["jobs"]
table_orientation = "destination_vertex_oriented"

[plugin.output_plugins.model.models.opportunity_source]
type = "lodes"
study_region = { type = "national" }

# collect LODES data at the tract level. while it is available at the block,
# the download + processing time is 10x that of census tracts. other possible values
# are `block`, `county` or `state`.
data_granularity = "census_tract"
# different editions of the dataset, we are choosing LODES v 8.0.
edition = "LODES8"
# Job Type, can have a value of “JT00” for All Jobs, “JT01” for Primary Jobs, “JT02” for All
# Private Jobs, “JT03” for Private Primary Jobs, “JT04” for All Federal Jobs, or “JT05” for
# Federal Primary Jobs
job_type = "JT00"
# Segment of the workforce, can have the values of:
# - S000: Total number of jobs (default)
# - SA01: Number of jobs of workers age 29 or younger
# - SA02: Number of jobs for workers age 30 to 54
# - SA03: Number of jobs for workers age 55 or older 
# - SE01: Number of jobs with earnings $1250/month or less
# - SE02: Number of jobs with earnings $1251/month to $3333/month
# - SE03: Number of jobs with earnings greater than $3333/month
# - SI01: Number of jobs in Goods Producing industry sectors
# - SI02: Number of jobs in Trade, Transportation, and Utilities industry sectors
# - SI03: Number of jobs in All Other Services industry sectors
segment = "S000"

# most recent year with all states. Alaska has no coverage from 2017-2022. we may
# want a "continental" variant which could support 2022.
year = 2016

[plugin.output_plugins.model.models.opportunity_source.activity_mapping]
# see https://lehd.ces.census.gov/data/lodes/LODES8/LODESTechDoc8.0.pdf
CNS01 = ["jobs"] # 11 (Agriculture, Forestry, Fishing and Hunting)
CNS02 = ["jobs"] # 21 (Mining, Quarrying, and Oil and Gas Extraction)
CNS03 = ["jobs"] # 22 (Utilities)
CNS04 = ["jobs"] # 23 (Construction)
CNS05 = ["jobs"] # 31-33 (Manufacturing)
CNS06 = ["jobs"] # 42 (Wholesale Trade)
CNS07 = ["jobs"] # 44-45 (Retail Trade)
CNS08 = ["jobs"] # 48-49 (Transportation and Warehousing)
CNS09 = ["jobs"] # 51 (Information)
CNS10 = ["jobs"] # 52 (Finance and Insurance)
CNS11 = ["jobs"] # 53 (Real Estate and Rental and Leasing)
CNS12 = ["jobs"] # 54 (Professional, Scientific, and Technical Services)
CNS13 = ["jobs"] # 55 (Management of Companies and Enterprises)
CNS14 = ["jobs"] # 56 (Admin/Support/Waste Mgmt/Remediation Services)
CNS15 = ["jobs"] # 61 (Educational Services)
CNS16 = ["jobs"] # 62 (Health Care and Social Assistance)
CNS17 = ["jobs"] # 71 (Arts, Entertainment, and Recreation)
CNS18 = ["jobs"] # 72 (Accommodation and Food Services)
CNS19 = ["jobs"] # 81 (Other Services [except Public Administration])
CNS20 = ["jobs"] # 92 (Public Administration)


[[plugin.output_plugins]]
type = "mep_score"
[plugin.output_plugins.modal_intensity_values]
type = "mep1_intensities"
[plugin.output_plugins.modal_intensity_values.intensities]
walk = { "energy" = 0, "cost" = 0 }
bike = { "energy" = 0, "cost" = 0 }
drive = { "energy" = 0.48, "cost" = 0.9 }
transit = { "energy" = 0.855, "cost" = 0.65 }
[plugin.output_plugins.modal_intensity_values.coefficients]
alpha = -0.5
beta = -0.08
sigma = -0.5
[plugin.output_plugins.activity_parameters]
type = "global_frequencies"
[plugin.output_plugins.activity_parameters.frequencies]
healthcare = 3.1
retail = 1.5
entertainment = 19.5
services = 8.4
food = 6.7
jobs = 16.6

###########################
### OUTPUT FILE FORMATS ###
###########################
[response_output_policy]
type = "combined"

[[response_output_policy.policies]]
type = "file"
filename = "result.csv"
[response_output_policy.policies.format]
type = "csv"
sorted = true
[response_output_policy.policies.format.mapping]
grid_id = "request.grid_id"
lon = "request.origin_x"
lat = "request.origin_y"
mode = "request.mode"
runtime = "search_app_runtime"
ram_mb = "search_result_size_mib"

opps_entertainment_total = "opportunity_totals.entertainment"
opps_retail_total = "opportunity_totals.retail"
opps_healthcare_total = "opportunity_totals.healthcare"
opps_services_total = "opportunity_totals.services"
opps_food_total = "opportunity_totals.food"
opps_jobs_total = "opportunity_totals.jobs"

opps_entertainment_10 = "bin.10.opportunities.entertainment"
opps_retail_10 = "bin.10.opportunities.retail"
opps_healthcare_10 = "bin.10.opportunities.healthcare"
opps_services_10 = "bin.10.opportunities.services"
opps_food_10 = "bin.10.opportunities.food"
opps_jobs_10 = "bin.10.opportunities.jobs"
opps_entertainment_20 = "bin.20.opportunities.entertainment"
opps_retail_20 = "bin.20.opportunities.retail"
opps_healthcare_20 = "bin.20.opportunities.healthcare"
opps_services_20 = "bin.20.opportunities.services"
opps_food_20 = "bin.20.opportunities.food"
opps_jobs_20 = "bin.20.opportunities.jobs"
opps_entertainment_30 = "bin.30.opportunities.entertainment"
opps_retail_30 = "bin.30.opportunities.retail"
opps_healthcare_30 = "bin.30.opportunities.healthcare"
opps_services_30 = "bin.30.opportunities.services"
opps_food_30 = "bin.30.opportunities.food"
opps_jobs_30 = "bin.30.opportunities.jobs"
opps_entertainment_40 = "bin.40.opportunities.entertainment"
opps_retail_40 = "bin.40.opportunities.retail"
opps_healthcare_40 = "bin.40.opportunities.healthcare"
opps_services_40 = "bin.40.opportunities.services"
opps_food_40 = "bin.40.opportunities.food"
opps_jobs_40 = "bin.40.opportunities.jobs"

isochrone_10 = "bin.10.isochrone"
isochrone_20 = "bin.20.isochrone"
isochrone_30 = "bin.30.isochrone"
isochrone_40 = "bin.40.isochrone"

mep = { sum = ["bin.10.mep.entertainment", "bin.10.mep.food", "bin.10.mep.healthcare", "bin.10.mep.jobs", "bin.10.mep.retail", "bin.10.mep.services", "bin.20.mep.entertainment", "bin.20.mep.food", "bin.20.mep.healthcare", "bin.20.mep.jobs", "bin.20.mep.retail", "bin.20.mep.services", "bin.30.mep.entertainment", "bin.30.mep.food", "bin.30.mep.healthcare", "bin.30.mep.jobs", "bin.30.mep.retail", "bin.30.mep.services", "bin.40.mep.entertainment", "bin.40.mep.food", "bin.40.mep.healthcare", "bin.40.mep.jobs", "bin.40.mep.retail", "bin.40.mep.services"] }
mep_entertainment = { sum = ["bin.10.mep.entertainment", "bin.20.mep.entertainment", "bin.30.mep.entertainment", "bin.40.mep.entertainment"] }
mep_food = { sum = ["bin.10.mep.food", "bin.20.mep.food", "bin.30.mep.food", "bin.40.mep.food"] }
mep_healthcare = { sum = ["bin.10.mep.healthcare", "bin.20.mep.healthcare", "bin.30.mep.healthcare", "bin.40.mep.healthcare"] }
mep_jobs = { sum = ["bin.10.mep.jobs", "bin.20.mep.jobs", "bin.30.mep.jobs", "bin.40.mep.jobs"] }
mep_retail = { sum = ["bin.10.mep.retail", "bin.20.mep.retail", "bin.30.mep.retail", "bin.40.mep.retail"] }
mep_services = { sum = ["bin.10.mep.services", "bin.20.mep.services", "bin.30.mep.services", "bin.40.mep.services"] }
