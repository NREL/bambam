parallelism = 8
search_orientation = "edge"
response_persistence_policy = "discard_response_from_memory"

[response_output_policy]
type = "combined"

# [[response_output_policy.policies]]
# type = "file"
# filename = "output_complete.json"
# format = { type = "json", newline_delimited = true }

[[response_output_policy.policies]]
type = "file"
filename = "natl_errors.csv"
[response_output_policy.policies.format]
type = "csv"
sorted = true
[response_output_policy.policies.format.mapping]
hex_id = "request.grid_id"
mode = "request.mode"
error = { optional = "error" }

[[response_output_policy.policies]]
type = "file"
filename = "natl_mep_matrix.csv"
[response_output_policy.policies.format]
type = "csv"
sorted = true
[response_output_policy.policies.format.mapping]
hex_id = "request.grid_id"
# name = "request.NAME20" # for UAC queries
lon = "request.origin_x"
lat = "request.origin_y"
mode = "request.mode"
population = "request.population"
mep = { sum = ["bin.10.mep.entertainment", "bin.10.mep.food", "bin.10.mep.healthcare", "bin.10.mep.jobs", "bin.10.mep.retail", "bin.10.mep.services", "bin.20.mep.entertainment", "bin.20.mep.food", "bin.20.mep.healthcare", "bin.20.mep.jobs", "bin.20.mep.retail", "bin.20.mep.services", "bin.30.mep.entertainment", "bin.30.mep.food", "bin.30.mep.healthcare", "bin.30.mep.jobs", "bin.30.mep.retail", "bin.30.mep.services", "bin.40.mep.entertainment", "bin.40.mep.food", "bin.40.mep.healthcare", "bin.40.mep.jobs", "bin.40.mep.retail", "bin.40.mep.services"] }
mep_entertainment = { sum = ["bin.10.mep.entertainment", "bin.20.mep.entertainment", "bin.30.mep.entertainment", "bin.40.mep.entertainment"] }
mep_food = { sum = ["bin.10.mep.food", "bin.20.mep.food", "bin.30.mep.food", "bin.40.mep.food"] }
mep_healthcare = { sum = ["bin.10.mep.healthcare", "bin.20.mep.healthcare", "bin.30.mep.healthcare", "bin.40.mep.healthcare"] }
mep_jobs = { sum = ["bin.10.mep.jobs", "bin.20.mep.jobs", "bin.30.mep.jobs", "bin.40.mep.jobs"] }
mep_retail = { sum = ["bin.10.mep.retail", "bin.20.mep.retail", "bin.30.mep.retail", "bin.40.mep.retail"] }
mep_services = { sum = ["bin.10.mep.services", "bin.20.mep.services", "bin.30.mep.services", "bin.40.mep.services"] }
geometry = "request.geometry"

[[response_output_policy.policies]]
type = "file"
filename = "natl_opportunities.csv"
[response_output_policy.policies.format]
type = "csv"
sorted = true
[response_output_policy.policies.format.mapping]
hex_id = "request.grid_id"
lon = "request.origin_x"
lat = "request.origin_y"
mode = "request.mode"
runtime = "search_app_runtime"
ram_mb = "search_result_size_mib"

opps_entertainment_10 = "bin.10.opportunities.entertainment"
opps_retail_10 = "bin.10.opportunities.retail"
opps_healthcare_10 = "bin.10.opportunities.healthcare"
opps_services_10 = "bin.10.opportunities.services"
opps_food_10 = "bin.10.opportunities.food"
opps_jobs_10 = "bin.10.opportunities.jobs"
opps_entertainment_20 = "bin.20.opportunities.entertainment"
opps_retail_20 = "bin.20.opportunities.retail"
opps_healthcare_20 = "bin.20.opportunities.healthcare"
opps_services_20 = "bin.20.opportunities.services"
opps_food_20 = "bin.20.opportunities.food"
opps_jobs_20 = "bin.20.opportunities.jobs"
opps_entertainment_30 = "bin.30.opportunities.entertainment"
opps_retail_30 = "bin.30.opportunities.retail"
opps_healthcare_30 = "bin.30.opportunities.healthcare"
opps_services_30 = "bin.30.opportunities.services"
opps_food_30 = "bin.30.opportunities.food"
opps_jobs_30 = "bin.30.opportunities.jobs"
opps_entertainment_40 = "bin.40.opportunities.entertainment"
opps_retail_40 = "bin.40.opportunities.retail"
opps_healthcare_40 = "bin.40.opportunities.healthcare"
opps_services_40 = "bin.40.opportunities.services"
opps_food_40 = "bin.40.opportunities.food"
opps_jobs_40 = "bin.40.opportunities.jobs"

isochrone_10 = "bin.10.isochrone"
isochrone_20 = "bin.20.isochrone"
isochrone_30 = "bin.30.isochrone"
isochrone_40 = "bin.40.isochrone"


[graph]
edge_list_input_file = "../../routee-compass-tomtom/data/tomtom_national/edges-compass.csv.gz"
vertex_list_input_file = "../../routee-compass-tomtom/data/tomtom_national/vertices-compass.csv.gz"
verbose = true

[algorithm]
type = "a*"

[termination]
type = "query_runtime"
limit = "00:02:00"
frequency = 100_000

[traversal]
type = "switch"

[[traversal.models]]
mode = "walk"
type = "fixed_speed"
distance_unit = "miles"
time_unit = "minutes"
speed_unit = "kph"
speed = 5
access_model = []
departure_agg = "sum"
arrival_agg = "sum"

[[traversal.models]]
mode = "bike"
type = "fixed_speed"
distance_unit = "miles"
time_unit = "minutes"
speed_unit = "kph"
speed = 16
access_model = []
departure_agg = "sum"
arrival_agg = "sum"

[[traversal.models]]
mode = "drive"
type = "link_speed"
underlying_type = "time_of_day"
departure_agg = "sum"
arrival_agg = "sum"
access_model = [
    # { access_type = "arrival", lookup_file = "data/denver_rand_delays_grid.csv", time_unit = "minutes" },
]
edge_to_speed_profile_input_file = "../../routee-compass-tomtom/data/tomtom_national/edges-speed-profile-id-mapping-enumerated.txt.gz"
speed_profile_input_file = "../../routee-compass-tomtom/data/tomtom_national/speed-profile.csv.gz"
# 35.704525623444134 is the average of all weekday_speed and weekend_speed entries
fallback = { type = "global", fill_value = 35.704, speed_unit = "kph" }
max_speed = 128
distance_unit = "miles"
time_unit = "hours"
speed_unit = "mph"

[traversal.models.speed_trace]
type = "dense"
speed_trace_input_file = "../../routee-compass-tomtom/data/tomtom_national/speed-trace.csv.gz"
stride = 300

[cost.weights]
time = 1.0

# [cost.vehicle_rates.time]
# type = "raw"

# based on 65.5 cents per mile 2023 IRS mileage rate, $/mile
[cost.vehicle_rates.distance]
type = "factor"
factor = 0.655

# based on $20/hr approximation of 2023 median hourly wages, $/second
[cost.vehicle_rates.time]
type = "factor"
factor = 0.333336

# based on AAA regular unleaded gas prices sampled 12/21/2023
[cost.vehicle_rates.energy_liquid]
type = "factor"
factor = 3.120

# based on $0.50/kWh approximation of DCFC charge rates, $/kWhtype = "factor"
[cost.vehicle_rates.energy_electric]
type = "factor"
factor = 0.50

[frontier]
type = "combined"

[[frontier.models]]
type = "road_class"
road_class_input_file = "../../routee-compass-tomtom/data/tomtom_national/edges-routing-class-enumerated.txt.gz"

[[frontier.models]]
type = "time_limit"
time_limit = 40.0
time_unit = "minutes"

[[frontier.models]]
type = "turn_restriction"
turn_restriction_input_file = "../../routee-compass-tomtom/data/tomtom_national/edges-turn-restrictions.csv.gz"

[[plugin.input_plugins]]
type = "inject"
key = "time_limit"
value = '40.0'
format = "json"

[[plugin.input_plugins]]
type = "inject"
key = "start_time"
value = '08:00:00'
format = "string"

[[plugin.input_plugins]]
type = "inject"
key = "start_weekday"
value = 'wednesday'
format = "string"

[[plugin.input_plugins]]
type = "grid"
extent_format = "wkt"
grid = { type = "h3", resolution = 6 }
[plugin.input_plugins.population_source]
type = "acs"
acs_type = "five_year"
acs_year = 2022
acs_resolution = "census_tract"
acs_categories = ["B01001_001E"]

[[plugin.input_plugins]]
type = "edge_rtree"
geometry_input_file = "../../routee-compass-tomtom/data/tomtom_national/edges-geometries-enumerated.txt.gz"
road_class_input_file = "../../routee-compass-tomtom/data/tomtom_national/edges-routing-class-enumerated.txt.gz"
# average edge length of h3 resolution 8 hex is 0.531414010km
# distance_tolerance = 0.531414010
distance_tolerance = 1000.0
distance_unit = "kilometers"

[[plugin.input_plugins]]
type = "inject"
key = "grid_search"
value = '{"modes":[{"mode":"walk","road_classes":[4,5,6,7]},{"mode":"bike","road_classes":[4,5,6,7]},{"mode":"drive","road_classes":[1,2,3,4,5,6]}]}'
format = "json"

[[plugin.input_plugins]]
type = "grid_search"

[[plugin.input_plugins]]
type = "load_balancer"
[plugin.input_plugins.weight_heuristic]
type = "custom"
[plugin.input_plugins.weight_heuristic.custom_weight_type]
type = "categorical"
column_name = "mode"
default = 1
mapping = { "walk" = 1, "bike" = 10, "drive" = 100 }

[[plugin.output_plugins]]
type = "summary"

[[plugin.output_plugins]]
type = "isochrone"
time_bin = { type = "list", times = [10, 20, 30, 40] }
isochrone_algorithm = { type = "k_nearest_concave_hull", k = 3 }
destination_point_generator = { type = "destination_point" }
isochrone_output_format = "wkb"
geometry_input_file = "../../routee-compass-tomtom/data/tomtom_national/edges-geometries-enumerated.txt.gz"

### MEP OPPORTUNITY DATA CONFIGURATION #################################
# assigns opportunities to search results based on a file or api data source
# and a taxonomy for MEP activity types.
# this example shows data loaded from the census LODES online file repository
# assigning activity types by NAICS sector id. 
[[plugin.output_plugins]]
type = "opportunity"
collect_format = "aggregate"

[plugin.output_plugins.model]
type = "api"
vertex_input_file = "../../routee-compass-tomtom/data/tomtom_national/vertices-compass.csv.gz"
activity_column_names = ["retail", "entertainment", "services", "healthcare", "food", "jobs"]
table_orientation = "destination_vertex_oriented"

[plugin.output_plugins.model.opportunity_source]
type = "lodes"
# a string of comma-separated values, each a FIPS identifier. these will be converted to their
# FIPS state code and used to download LODES dataset files which are organized by state.
# in this example, the FIPS geoid for the state of Colorado (08) is the only one needed.
# study_region = "08"
# if instead national = true, the entire US is the study region
national = true
# collect LODES data at the tract level. while it is available at the block,
# the download + processing time is 10x that of census tracts. other possible values
# are `block`, `county` or `state`.
data_granularity = "census_tract"
# different editions of the dataset, we are choosing LODES v 8.0.
edition = "LODES8"
# Job Type, can have a value of “JT00” for All Jobs, “JT01” for Primary Jobs, “JT02” for All
# Private Jobs, “JT03” for Private Primary Jobs, “JT04” for All Federal Jobs, or “JT05” for
# Federal Primary Jobs
job_type = "JT00"
# Segment of the workforce, can have the values of:
# - S000: Total number of jobs (default)
# - SA01: Number of jobs of workers age 29 or younger
# - SA02: Number of jobs for workers age 30 to 54
# - SA03: Number of jobs for workers age 55 or older 
# - SE01: Number of jobs with earnings $1250/month or less
# - SE02: Number of jobs with earnings $1251/month to $3333/month
# - SE03: Number of jobs with earnings greater than $3333/month
# - SI01: Number of jobs in Goods Producing industry sectors
# - SI02: Number of jobs in Trade, Transportation, and Utilities industry sectors
# - SI03: Number of jobs in All Other Services industry sectors
segment = "S000"
year = 2016      # most recent year that includes all states, see LODES tech doc 8.0

[plugin.output_plugins.model.opportunity_source.activity_mapping]
# see https://lehd.ces.census.gov/data/lodes/LODES8/LODESTechDoc8.0.pdf
CNS01 = ["jobs"]                  # 11 (Agriculture, Forestry, Fishing and Hunting)
CNS02 = ["jobs"]                  # 21 (Mining, Quarrying, and Oil and Gas Extraction)
CNS03 = ["jobs"]                  # 22 (Utilities)
CNS04 = ["jobs"]                  # 23 (Construction)
CNS05 = ["jobs"]                  # 31-33 (Manufacturing)
CNS06 = ["jobs", "retail"]        # 42 (Wholesale Trade)
CNS07 = ["jobs", "retail"]        # 44-45 (Retail Trade)
CNS08 = ["jobs"]                  # 48-49 (Transportation and Warehousing)
CNS09 = ["jobs"]                  # 51 (Information)
CNS10 = ["jobs"]                  # 52 (Finance and Insurance)
CNS11 = ["jobs"]                  # 53 (Real Estate and Rental and Leasing)
CNS12 = ["jobs"]                  # 54 (Professional, Scientific, and Technical Services)
CNS13 = ["jobs"]                  # 55 (Management of Companies and Enterprises)
CNS14 = ["jobs"]                  # 56 (Admin/Support/Waste Mgmt/Remediation Services)
CNS15 = ["jobs", "services"]      # 61 (Educational Services)
CNS16 = ["jobs", "healthcare"]    # 62 (Health Care and Social Assistance)
CNS17 = ["jobs", "entertainment"] # 71 (Arts, Entertainment, and Recreation)
CNS18 = ["jobs", "food"]          # 72 (Accommodation and Food Services)
CNS19 = ["jobs"]                  # 81 (Other Services [except Public Administration])
CNS20 = ["jobs"]                  # 92 (Public Administration)

[[plugin.output_plugins]]
type = "mep_score"
[plugin.output_plugins.modal_intensity_values]
type = "mep1_intensities"
[plugin.output_plugins.modal_intensity_values.intensities]
walk = { "energy" = 0, "cost" = 0 }
bike = { "energy" = 0, "cost" = 0 }
drive = { "energy" = 0.48, "cost" = 0.9 }
transit = { "energy" = 0.855, "cost" = 0.65 }
[plugin.output_plugins.modal_intensity_values.coefficients]
alpha = -0.5
beta = -0.08
sigma = -0.5
[plugin.output_plugins.activity_parameters]
type = "global_frequencies"
[plugin.output_plugins.activity_parameters.frequencies]
# typo: these are really the complete opportunity terms incl. n*/n_j * f_j / sum(F)
healthcare = 0.40766134595427905
retail = 0.005153658418765686
entertainment = 6.256444248048313
services = 0.1669337951278225
food = 0.12007168458781362
jobs = 0.0010180066557008334
