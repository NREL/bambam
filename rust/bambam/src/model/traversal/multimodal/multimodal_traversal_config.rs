use super::{FeatureDependency, FeatureMappingsByMode};
use routee_compass_core::model::state::OutputFeature;
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;

#[derive(Serialize, Deserialize)]
pub struct MultimodalTraversalConfig {
    /// for each mode, the mapping of feature names to their role
    /// in mode-specific state updates and search cost aggregation.
    pub modes: FeatureMappingsByMode,
    /// the output features generated by this model (across all modes).
    /// for convenience in the upstream TOML file, this is expected to
    /// be a HashMap (TOML object), since TOML arrays cannot be heterogeneous.
    pub output_features: HashMap<String, OutputFeature>,
}
